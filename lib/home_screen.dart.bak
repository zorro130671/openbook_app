// lib/home_screen.dart

import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';

import 'models/user_model.dart';
import 'screens/chat_screen.dart';
import 'screens/contacts_screen.dart';
import 'screens/ai_hub_screen.dart';
import 'screens/new_chat_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/me_screen.dart';
import 'utils/custom_routes.dart';
import 'screens/privacy_control_screen.dart';
import 'screens/documents_screen.dart';
import 'screens/dev_auth_screen.dart';

enum ChatFilter { all, unread, favorite, groups }

// ====== Demo users (fallback) ======
final List<UserModel> demoUsers = [
  UserModel(
    uid: 'NhY1NzNu0FgCPCvboeHSPqoy7Ng2',
    displayName: 'Zah Martin',
    email: 'zah@openbook.com',
    avatarUrl: 'assets/images/avatars/zah_avatar.png',
    statusMessage: 'Available',
    isOnline: true,
  ),
  UserModel(
    uid: 'wv2OJVWg8fPo1qZTN483QGqyt132',
    displayName: 'Sumitra Nathan',
    email: 'sumitra@openbook.com',
    avatarUrl: 'assets/images/avatars/sumitra_avatar.png',
    statusMessage: 'Feeling amazing ✨',
    isOnline: true,
  ),
  UserModel(
    uid: 'XenOj61VJRc7rMmrPykMNIMhr',
    displayName: 'Liam Wong',
    email: 'liam@openbook.com',
    avatarUrl: 'assets/images/avatars/liam_avatar.png',
    statusMessage: 'Busy',
    isOnline: false,
  ),
];

// ===== Dev switcher model =====
class _DevUser {
  final String label;
  final String email;
  final String password;
  const _DevUser(this.label, this.email, this.password);
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  UserModel? _currentUser; // no auto-login

  // UI state
  int _selectedIndex = 0;
  ChatFilter _filter = ChatFilter.all;

  // search
  final _searchCtrl = TextEditingController();
  Timer? _debounce;
  String _searchText = '';

  // favorites
  final Set<String> _favorites = {};

  // cached list for Contacts screen
  List<UserModel> _lastUsers = const [];

  // presence helpers (for optional backfill)
  final List<String> _statusPool = const [
    'Available',
    'Busy',
    'Away',
    'Feeling amazing',
    'In a meeting',
    'On vacation',
    'At the gym',
    'Offline',
    'Working from home',
    'Do not disturb',
  ];
  final Random _rand = Random();

  // translate prefs
  bool _autoTranslate = false;
  String _targetLang = 'en';

  // Dev users
  static const _DEV_USERS = <_DevUser>[
    _DevUser('Zah Martin', 'Test1@openbook.com', '123456'),
    _DevUser('Sumitra Nathan', 'Test2a@openbook.com', '123456'),
    _DevUser('Liam Wong', 'Test3@openbook.com', '123456'),
  ];

  StreamSubscription<User?>? _authSub;

  // ===== Avatar helpers =====
  static const String _bucket = 'open-book-16zt1k.firebasestorage.app';

  String _toAvatarUrl(String? value) {
    if (value == null || value.isEmpty) return '';
    if (value.startsWith('http')) return value;
    if (value.startsWith('assets/')) return value;
    final encoded = Uri.encodeComponent(value);
    return 'https://firebasestorage.googleapis.com/v0/b/$_bucket/o/$encoded?alt=media';
  }

  ImageProvider<Object> _avatarProvider(String? raw) {
    final url = _toAvatarUrl(raw);
    if (url.isEmpty) {
      return const AssetImage('assets/images/avatars/placeholder.png');
    }
    if (url.startsWith('assets/')) return AssetImage(url);
    return NetworkImage(url);
  }

  @override
  void initState() {
    super.initState();

    // live refresh when auth changes
    _authSub = FirebaseAuth.instance.authStateChanges().listen((u) {
      if (!mounted) return;
      setState(() {
        if (u == null) {
          _currentUser = null;
        } else {
          _currentUser = UserModel(
            uid: u.uid,
            displayName: u.displayName ?? (u.email ?? 'You'),
            email: u.email ?? '',
            avatarUrl: u.photoURL ?? 'assets/images/avatars/zah_avatar.png',
            statusMessage: 'Available',
            isOnline: true,
          );
        }
      });
    });

    // search debounce
    _searchCtrl.addListener(() {
      _debounce?.cancel();
      _debounce = Timer(const Duration(milliseconds: 200), () {
        if (mounted) setState(() => _searchText = _searchCtrl.text.trim());
      });
    });
  }

  @override
  void dispose() {
    _authSub?.cancel();
    _debounce?.cancel();
    _searchCtrl.dispose();
    super.dispose();
  }

  Timestamp _randomLastSeen(bool isOnline) {
    if (isOnline) return Timestamp.now();
    final minutesAgo = 5 + _rand.nextInt(60 * 24 * 7);
    final dt = DateTime.now().subtract(Duration(minutes: minutesAgo));
    return Timestamp.fromDate(dt);
  }

  String _relativeTime(DateTime dt) {
    final diff = DateTime.now().difference(dt);
    if (diff.inMinutes < 1) return 'just now';
    if (diff.inMinutes < 60) return '${diff.inMinutes}m ago';
    if (diff.inHours < 24) return '${diff.inHours}h ago';
    if (diff.inDays == 1) return 'yesterday';
    if (diff.inDays < 7) return '${diff.inDays}d ago';
    return DateFormat('MMM d').format(dt);
  }

  // FIXED-SIZE avatar
  Widget _avatar(UserModel u) => SizedBox(
    width: 48,
    height: 48,
    child: Stack(
      clipBehavior: Clip.none,
      children: [
        const SizedBox.expand(),
        CircleAvatar(radius: 24, backgroundImage: _avatarProvider(u.avatarUrl)),
        Align(
          alignment: Alignment.bottomRight,
          child: Container(
            width: 12,
            height: 12,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: (u.isOnline == true) ? Colors.green : Colors.grey,
              border: Border.all(color: Colors.white, width: 2),
            ),
          ),
        ),
      ],
    ),
  );

  void _toggleFavorite(UserModel u) {
    setState(() {
      if (_favorites.contains(u.uid)) {
        _favorites.remove(u.uid);
      } else {
        _favorites.add(u.uid);
      }
    });
  }

  String? get _myUid => FirebaseAuth.instance.currentUser?.uid;

  bool _isMe(UserModel u) {
    final my = _myUid;
    if (my != null && u.uid.isNotEmpty) return u.uid == my;
    return false;
  }

  Widget _contactTile(UserModel user) => ListTile(
    leading: _avatar(user),
    title: Text(user.displayName, maxLines: 1, overflow: TextOverflow.ellipsis),
    subtitle: Text(
      () {
        final base = (user.statusMessage?.isNotEmpty == true)
            ? user.statusMessage!
            : user.email;
        if (user.isOnline == true) return base;
        final ls = user.lastSeen;
        if (ls != null) return '$base • last seen ${_relativeTime(ls)}';
        return base;
      }(),
      maxLines: 1,
      overflow: TextOverflow.ellipsis,
    ),
    trailing: IconButton(
      icon: Icon(
        _favorites.contains(user.uid) ? Icons.star : Icons.star_border,
      ),
      onPressed: () => _toggleFavorite(user),
      tooltip: _favorites.contains(user.uid) ? 'Unfavorite' : 'Favorite',
    ),
    onTap: () => _openOrCreateDirectChat(user),
    onLongPress: () => _toggleFavorite(user),
  );

  String _directChatId(String a, String b) {
    final pair = [a, b]..sort();
    return 'dm_${pair[0]}_${pair[1]}';
  }

  // smooth slide+fade
  Future<T?> _pushSmooth<T>(Widget page) {
    return Navigator.of(context).push<T>(
      PageRouteBuilder(
        transitionDuration: const Duration(milliseconds: 230),
        reverseTransitionDuration: const Duration(milliseconds: 200),
        pageBuilder: (_, __, ___) => page,
        transitionsBuilder: (_, anim, __, child) {
          final offset = Tween<Offset>(
            begin: const Offset(0.06, 0),
            end: Offset.zero,
          ).chain(CurveTween(curve: Curves.easeOutCubic)).animate(anim);
          final fade = CurvedAnimation(parent: anim, curve: Curves.easeOutQuad);
          return FadeTransition(
            opacity: fade,
            child: SlideTransition(position: offset, child: child),
          );
        },
      ),
    );
  }

  Future<void> _openOrCreateDirectChat(UserModel other) async {
    final myUid = FirebaseAuth.instance.currentUser?.uid;
    if (myUid == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Sign in via the dev switcher or Dev Sign-in first.'),
        ),
      );
      return;
    }

    final chatId = _directChatId(myUid, other.uid);
    final chatRef = FirebaseFirestore.instance.collection('chats').doc(chatId);

    final snap = await chatRef.get();
    if (!snap.exists) {
      await chatRef.set({
        'chatId': chatId,
        'isGroup': false,
        'participants': [myUid, other.uid],
        'participantNames': [
          _currentUser?.displayName ?? 'You',
          other.displayName,
        ],
        'createdAt': FieldValue.serverTimestamp(),
        'lastMessage': '',
        'lastMessageTimestamp': FieldValue.serverTimestamp(),
        'unreadCount': {myUid: 0, other.uid: 0},
      });
    }

    if (!mounted) return;
    await _pushSmooth(
      ChatScreen(
        currentUser: _currentUser!, // guarded by sign-in above
        chatId: chatId,
        chatName: other.displayName,
        avatarUrl: _toAvatarUrl(other.avatarUrl),
        isGroupChat: false,
      ),
    );
  }

  // ===== Streamed contacts =====
  Widget _buildContactsList() {
    final usersCol = FirebaseFirestore.instance
        .collection('users')
        .withConverter<Map<String, dynamic>>(
          fromFirestore: (snap, _) => snap.data() ?? <String, dynamic>{},
          toFirestore: (m, _) => m,
        )
        .orderBy('displayName');

    return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
      stream: usersCol.snapshots(),
      builder: (context, snap) {
        List<UserModel> users;
        if (snap.hasData && snap.data!.docs.isNotEmpty) {
          users = snap.data!.docs.map((d) {
            final m = d.data();
            final avatarRaw =
                (m['avatarUrl'] ?? m['avatarPath'] ?? m['photoURL'] ?? '')
                    .toString();

            return UserModel.fromMap({
              ...m,
              'uid': d.id,
              'avatarUrl': avatarRaw, // resolved later
            });
          }).toList();
        } else {
          users = List<UserModel>.from(demoUsers);
        }

        // hide me if signed in
        if (_myUid != null) {
          users = users.where((u) => !_isMe(u)).toList();
        }

        // search
        if (_searchText.isNotEmpty) {
          final q = _searchText.toLowerCase();
          users = users
              .where((u) => u.displayName.toLowerCase().contains(q))
              .toList();
        }

        // filters
        switch (_filter) {
          case ChatFilter.favorite:
            users = users.where((u) => _favorites.contains(u.uid)).toList();
            break;
          case ChatFilter.groups:
            users = const <UserModel>[]; // placeholder for group list
            break;
          case ChatFilter.unread:
          case ChatFilter.all:
          default:
            break;
        }

        _lastUsers = users; // cache

        return ListView.separated(
          padding: const EdgeInsets.symmetric(vertical: 8),
          itemCount: users.length,
          separatorBuilder: (_, __) => const Divider(height: 0),
          itemBuilder: (_, i) => _contactTile(users[i]),
        );
      },
    );
  }

  void _openSettings() {
    if (_currentUser == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Sign in first.')));
      return;
    }
    _pushSmooth(SettingsScreen(currentUser: _currentUser!));
  }

  void _openMe() {
    final u = _currentUser;
    if (u == null) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Sign in first.')));
      return;
    }
    _pushSmooth(
      MeScreen(uid: u.uid, displayName: u.displayName, avatarUrl: u.avatarUrl),
    );
  }

  void _openNewChat() {
    // TODO: Implement new chat functionality
    debugPrint("Open New Chat tapped");
  }

  Future<void> _openDevAuth() async {
    final refreshNeeded = await _pushSmooth(const DevAuthScreen());
    if (refreshNeeded == true) {
      if (mounted) setState(() {});
    }
  }

  Future<void> _showDevSwitcher() async {
    if (!mounted) return;
    showModalBottomSheet(
      context: context,
      showDragHandle: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (ctx) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 8),
            const Text(
              'Switch user (quick dev)',
              style: TextStyle(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            for (final u in _DEV_USERS)
              ListTile(
                leading: const Icon(Icons.switch_account),
                title: Text(u.label),
                subtitle: Text(u.email),
                onTap: () async {
                  Navigator.of(ctx).pop();
                  await _devSignIn(u);
                },
              ),
            const SizedBox(height: 12),
            const Divider(height: 0),
            ListTile(
              leading: const Icon(Icons.developer_mode),
              title: const Text('Sign in as any user…'),
              onTap: () {
                Navigator.of(ctx).pop();
                _openDevAuth();
              },
            ),
            const SizedBox(height: 12),
          ],
        ),
      ),
    );
  }

  Future<void> _devSignIn(_DevUser u) async {
    final messenger = ScaffoldMessenger.of(context);
    final email = u.email.trim().toLowerCase();
    final password = u.password.trim();

    try {
      await FirebaseAuth.instance.signOut();

      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      messenger.showSnackBar(
        SnackBar(content: Text('Signed in as ${u.label}')),
      );
    } on FirebaseAuthException catch (e) {
      messenger.showSnackBar(SnackBar(content: Text('Auth error: ${e.code}')));
    } catch (e) {
      messenger.showSnackBar(SnackBar(content: Text('Sign-in failed: $e')));
    }
  }

  // ---------- Top filter chips ----------
  Widget _filterChips() {
    final selectedBg = Theme.of(context).colorScheme.primary;
    final selectedFg = Colors.white;

    Widget chip(String label, ChatFilter value) {
      final selected = _filter == value;
      return ChoiceChip(
        label: Text(
          label,
          style: TextStyle(
            color: selected
                ? selectedFg
                : Theme.of(context).colorScheme.onSurface,
            fontWeight: selected ? FontWeight.w600 : FontWeight.w400,
          ),
        ),
        showCheckmark: false,
        selected: selected,
        backgroundColor: Theme.of(context).colorScheme.surface,
        selectedColor: selectedBg,
        side: BorderSide(
          color: selected ? selectedBg : Theme.of(context).dividerColor,
        ),
        onSelected: (_) => setState(() => _filter = value),
      );
    }

    return Wrap(
      spacing: 8,
      children: [
        chip('All', ChatFilter.all),
        chip('Unread', ChatFilter.unread),
        chip('Favorite', ChatFilter.favorite),
        chip('Groups', ChatFilter.groups),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final signedIn = _currentUser != null;

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(icon: const Icon(Icons.apps), onPressed: () {}),
        title: const Text('OpenBook'),
        actions: [
          // Documents
          IconButton(
            tooltip: 'Documents',
            icon: const Icon(Icons.description_outlined),
            onPressed: () {
              if (_currentUser == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Please sign in to view Documents'),
                  ),
                );
                return;
              }
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (_) => DocumentsScreen(currentUser: _currentUser!),
                ),
              );
            },
          ),

          // Privacy
          Hero(
            tag: 'privacy_shield',
            child: Material(
              color: Colors.transparent,
              child: IconButton(
                tooltip: 'Privacy Dashboard',
                icon: Stack(
                  alignment: Alignment.center,
                  children: const [
                    // Inherit the AppBar icon color (usually white)
                    Icon(Icons.shield_outlined, size: 28, color: null),
                    // Inner detail stays white (or inherit if you prefer)
                    Icon(Icons.lock_outline, size: 16, color: Colors.white),
                  ],
                ),
                onPressed: () {
                  Navigator.of(
                    context,
                  ).push(fadeRoute(const PrivacyControlScreen()));
                },
              ),
            ),
          ),

          // New chat
          IconButton(
            icon: const Icon(Icons.add_comment_outlined),
            onPressed: _openNewChat,
          ),

          // Menu
          PopupMenuButton<String>(
            onSelected: (v) {
              if (v == 'dev_switch') _showDevSwitcher();
              if (v == 'dev_auth') _openDevAuth();
              if (v == 'sign_out') FirebaseAuth.instance.signOut();
            },
            itemBuilder: (_) => [
              const PopupMenuItem(
                value: 'dev_switch',
                child: Text('Switch user (quick dev)'),
              ),
              const PopupMenuItem(
                value: 'dev_auth',
                child: Text('Sign in as any user…'),
              ),
              if (signedIn)
                const PopupMenuItem(value: 'sign_out', child: Text('Sign out')),
            ],
          ),
        ],
      ),

      body: Column(
        children: [
          if (!signedIn)
            Container(
              width: double.infinity,
              margin: const EdgeInsets.fromLTRB(12, 12, 12, 0),
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primaryContainer,
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Text(
                'You are signed out. Long-press the title or use the menu to sign in (dev).',
              ),
            ),

          // Search
          Padding(
            padding: const EdgeInsets.fromLTRB(12, 12, 12, 4),
            child: TextField(
              controller: _searchCtrl,
              decoration: const InputDecoration(
                hintText: 'Search contacts',
                prefixIcon: Icon(Icons.search),
                border: OutlineInputBorder(),
                isDense: true,
              ),
            ),
          ),

          // Filter chips
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            child: _filterChips(),
          ),

          // Auto-translate toggle
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: Card(
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 10,
                ),
                child: Row(
                  children: [
                    const Icon(Icons.translate),
                    const SizedBox(width: 10),
                    Expanded(
                      child: Text(
                        _autoTranslate
                            ? 'Auto-translate ON • Target: ${_targetLang.toUpperCase()}'
                            : 'Auto-translate OFF',
                      ),
                    ),
                    Switch(
                      value: _autoTranslate,
                      onChanged: (v) => setState(() => _autoTranslate = v),
                    ),
                    const SizedBox(width: 6),
                    PopupMenuButton<String>(
                      tooltip: 'Target language',
                      onSelected: (lang) => setState(() => _targetLang = lang),
                      itemBuilder: (_) => const [
                        PopupMenuItem(value: 'en', child: Text('English')),
                        PopupMenuItem(value: 'ar', child: Text('Arabic')),
                        PopupMenuItem(value: 'hi', child: Text('Hindi')),
                        PopupMenuItem(value: 'ja', child: Text('Japanese')),
                        PopupMenuItem(value: 'es', child: Text('Spanish')),
                      ],
                      child: Chip(
                        label: Text(_targetLang.toUpperCase()),
                        visualDensity: VisualDensity.compact,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Contacts list
          Expanded(child: _buildContactsList()),
        ],
      ),

      bottomNavigationBar: SizedBox(
        height: 64,
        child: BottomNavigationBar(
          currentIndex: _selectedIndex,
          onTap: (i) async {
            switch (i) {
              case 0:
                break;
              case 1:
                await _pushSmooth(ContactsScreen(contacts: _lastUsers));
                break;
              case 2:
                await _pushSmooth(const AIHubScreen());
                break;
              case 3:
                _openMe();
                break;
            }
            if (mounted) setState(() => _selectedIndex = i);
          },
          type: BottomNavigationBarType.fixed,
          selectedFontSize: 12,
          unselectedFontSize: 11,
          showUnselectedLabels: true,
          items: const [
            BottomNavigationBarItem(
              icon: Icon(Icons.chat_bubble_outline),
              label: 'Chats',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.group_outlined),
              label: 'Contacts',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.bolt_outlined),
              label: 'AI Hub',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person_outlined),
              label: 'me',
            ),
          ],
        ),
      ),
    );
  }
}

// ------------------- Dock item model (unused; kept for reference) -------------------
class _DockItem {
  final IconData icon;
  final String label;
  const _DockItem(this.icon, this.label);
}
